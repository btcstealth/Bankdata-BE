package org.btc.resource;

import io.smallrye.common.constraint.NotNull;
import jakarta.inject.Inject;
import jakarta.validation.Valid;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import org.btc.model.Account;
import org.btc.service.AccountService;

import java.util.ArrayList;
import java.util.List;

@Path("/account")
public class AccountResource {

    @Inject
    AccountService accountService;

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public List<Account> getAllAccounts() {
        return accountService.getAllAccounts();
    }

    @POST
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    public Account createAccount(@Valid Account account) {
        //return the newly created account, uid and accountNumber should probably be generated by the backend and not be visible as a return value
        return accountService.createAccount(account);
    }

    @PATCH
    @Path("{accountNumber}/deposit/{funds}")
    @Produces(MediaType.APPLICATION_JSON)
    public void depositFunds(@PathParam("accountNumber") Long accountNumber, @PathParam("funds") double funds) {
        //return new balance or simply no reponse with 200 OK
        accountService.depositIntoAccount(accountNumber, funds);
    }

    //probably better to encapsulate in an object to avoid the long path
    @PATCH
    @Path("{senderAccountNumber}/receiver/{receiverAccountNumber}/funds/{funds}")
    @Produces(MediaType.APPLICATION_JSON)
    public void transferFunds(@PathParam("senderAccountNumber") @NotNull Long senderAccountNumber, @PathParam("receiverAccountNumber") @NotNull Long receiverAccountNumber, @PathParam("funds") @NotNull double funds) {
        //there are more precise terms to describe sender and receiver of funds.
        accountService.transferFunds(senderAccountNumber, receiverAccountNumber, funds);
    }

    @GET
    @Path("/{accountNumber}/balance")
    @Produces(MediaType.APPLICATION_JSON)
    public double getBalance(@PathParam("accountNumber") Long accountNumber) {
        return accountService.getAccountBalance(accountNumber);
    }

}
